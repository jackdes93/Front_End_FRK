{"remainingRequest":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/babel-loader/lib/index.js!/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/eslint-loader/index.js??ref--13-0!/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/src/vee-validate.js","dependencies":[{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/src/vee-validate.js","mtime":1581180725094},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { extend, configure } from \"vee-validate\";\nimport { required, email, min, confirmed, regex } from \"vee-validate/dist/rules\";\nimport i18n from \"./lang/i18n\";\nconfigure({\n  defaultMessage: function defaultMessage(field, values) {\n    // override the field name.\n    values._field_ = i18n.t(\"fields.\".concat(field));\n    return i18n.t(\"fields.\".concat(field))[values._rule_];\n  }\n}); // Install required rule and message.\n\nextend(\"required\", required); // Install email rule and message.\n\nextend(\"email\", email); // Install min rule and message.\n\nextend(\"min\", {\n  validate: function validate(value, _ref) {\n    var min = _ref.min;\n    return value.length >= min;\n  },\n  params: ['min'],\n  message: function message(field, values) {\n    return i18n.t(\"fields.\".concat(field))[values._rule_];\n  }\n});\nextend('max', {\n  validate: function validate(value, _ref2) {\n    var max = _ref2.max;\n    return value.length <= max;\n  },\n  params: ['max'],\n  message: function message(field, values) {\n    return i18n.t(\"fields.\".concat(field))[values._rule_];\n  }\n});\nextend('confirmed', confirmed);\nextend('regex', regex);\nextend('password', {\n  params: ['target'],\n  validate: function validate(value, _ref3) {\n    var target = _ref3.target;\n    return value === target;\n  },\n  message: function message(field, values) {\n    return i18n.t(\"fields.\".concat(field))[values._rule_];\n  }\n});",{"version":3,"sources":["/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/src/vee-validate.js"],"names":["extend","configure","required","email","min","confirmed","regex","i18n","defaultMessage","field","values","_field_","t","_rule_","validate","value","length","params","message","max","target"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,cAAlC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,SAA/B,EAA0CC,KAA1C,QAAuD,yBAAvD;AACA,OAAOC,IAAP;AAEAN,SAAS,CAAC;AACRO,EAAAA,cAAc,EAAE,wBAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC;AACAA,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,IAAI,CAACK,CAAL,kBAAiBH,KAAjB,EAAjB;AACA,WAAOF,IAAI,CAACK,CAAL,kBAAiBH,KAAjB,GAA0BC,MAAM,CAACG,MAAjC,CAAP;AACD;AALO,CAAD,CAAT,C,CAQA;;AACAb,MAAM,CAAC,UAAD,EAAaE,QAAb,CAAN,C,CAEA;;AACAF,MAAM,CAAC,OAAD,EAAUG,KAAV,CAAN,C,CAEA;;AACAH,MAAM,CAAC,KAAD,EAAQ;AACVc,EAAAA,QADU,oBACDC,KADC,QACa;AAAA,QAANX,GAAM,QAANA,GAAM;AACrB,WAAOW,KAAK,CAACC,MAAN,IAAgBZ,GAAvB;AACD,GAHS;AAIVa,EAAAA,MAAM,EAAE,CAAC,KAAD,CAJE;AAKVC,EAAAA,OAAO,EAAE,iBAACT,KAAD,EAAQC,MAAR,EAAmB;AAC1B,WAAOH,IAAI,CAACK,CAAL,kBAAiBH,KAAjB,GAA0BC,MAAM,CAACG,MAAjC,CAAP;AACD;AAPS,CAAR,CAAN;AAUAb,MAAM,CAAC,KAAD,EAAQ;AACZc,EAAAA,QADY,oBACHC,KADG,SACW;AAAA,QAANI,GAAM,SAANA,GAAM;AACrB,WAAOJ,KAAK,CAACC,MAAN,IAAgBG,GAAvB;AACD,GAHW;AAIZF,EAAAA,MAAM,EAAE,CAAC,KAAD,CAJI;AAKZC,EAAAA,OAAO,EAAE,iBAACT,KAAD,EAAQC,MAAR,EAAmB;AAC1B,WAAOH,IAAI,CAACK,CAAL,kBAAiBH,KAAjB,GAA0BC,MAAM,CAACG,MAAjC,CAAP;AACD;AAPW,CAAR,CAAN;AAUAb,MAAM,CAAC,WAAD,EAAcK,SAAd,CAAN;AACAL,MAAM,CAAC,OAAD,EAAUM,KAAV,CAAN;AAEAN,MAAM,CAAC,UAAD,EAAa;AACjBiB,EAAAA,MAAM,EAAE,CAAC,QAAD,CADS;AAEjBH,EAAAA,QAFiB,oBAERC,KAFQ,SAEW;AAAA,QAAVK,MAAU,SAAVA,MAAU;AAC1B,WAAOL,KAAK,KAAKK,MAAjB;AACD,GAJgB;AAKjBF,EAAAA,OAAO,EAAE,iBAACT,KAAD,EAAQC,MAAR,EAAmB;AAC1B,WAAQH,IAAI,CAACK,CAAL,kBAAiBH,KAAjB,GAA0BC,MAAM,CAACG,MAAjC,CAAR;AACD;AAPgB,CAAb,CAAN","sourcesContent":["import { extend, configure } from \"vee-validate\";\nimport { required, email, min, confirmed, regex } from \"vee-validate/dist/rules\";\nimport i18n from \"./lang/i18n\";\n\nconfigure({\n  defaultMessage: (field, values) => {\n    // override the field name.\n    values._field_ = i18n.t(`fields.${field}`);\n    return i18n.t(`fields.${field}`)[values._rule_]\n  }\n});\n\n// Install required rule and message.\nextend(\"required\", required);\n\n// Install email rule and message.\nextend(\"email\", email);\n\n// Install min rule and message.\nextend(\"min\", {\n    validate(value, {min}) {\n      return value.length >= min\n    },\n    params: ['min'],\n    message: (field, values) => {\n      return i18n.t(`fields.${field}`)[values._rule_]\n    }\n});\n\nextend('max', {\n  validate(value, {max}) {\n    return value.length <= max\n  },\n  params: ['max'],\n  message: (field, values) => {\n    return i18n.t(`fields.${field}`)[values._rule_]\n  }\n})\n\nextend('confirmed', confirmed);\nextend('regex', regex);\n\nextend('password', {\n  params: ['target'],\n  validate(value, { target }) {\n    return value === target;\n  },\n  message: (field, values) => {\n    return  i18n.t(`fields.${field}`)[values._rule_]\n  }\n});"]}]}