{"remainingRequest":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/src/components/Pages/Admin/Pages/AdvList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/src/components/Pages/Admin/Pages/AdvList.vue","mtime":1578215518000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jackdesy93/Documents/Project Free Landcer/Franchise King/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { HTTP_ADMIN } from '../../../../http-common';\nimport { socket_bus } from '../../../../main';\nimport datepicker from 'vuejs-datepicker';\n\nexport default {\n    components: { datepicker},\n    data() {\n        return {\n            adv_list: [],\n            adv_selected: null,\n            adv_preview: null,\n            is_preview: false,\n            status: ['START', 'STOP', 'PROCESSING', 'PAUSE', 'WAITING'],\n            format: 'dd/MM/yyyy',\n            disable_date : {\n                to: new Date(),\n                ranges: []\n            },\n            highlighted: {\n                to: null,\n                from: new Date(Date.now() + 24 * 60 * 60 * 1000)\n            },\n        }\n    },\n    methods: {\n        handle_translate_state (state) {\n            switch(state) {\n                case 'WAITING':\n                    return this.$t('waiting')\n                case 'START':\n                    return this.$t('start')\n                case 'STOP':\n                    return this.$t('stop')\n                case 'PROCESSING':\n                    return this.$t('processing')\n                case 'PAUSE':\n                    return this.$t('pause')\n            }\n        },\n        handle_translate(name) {\n            var result = ''\n            switch(name) {\n                case 'Drink':\n                    result = this.$t('drink')\n                    break;\n                case 'Dessert':\n                    result = this.$t('dessert')\n                    break;\n                case 'Vietnamese Foods':\n                    result = this.$t('vn_food')\n                    break;\n                case 'Foriegn Foods':\n                    result = this.$t('foriegn_fd')\n                    break;\n                case 'BBQ':\n                    result = this.$t('bbq')\n                    break;\n                case 'Brunch':\n                    result = this.$t('brunch')\n                    break;\n                case 'Hot Pot':\n                    result = this.$t('hotpot')\n                    break;\n            }\n            return result;\n        },\n        handle_change_status(advertisement, state) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.patch('/advertisements/update-state/' + advertisement._id, {status: state}).then(result => {\n                    resolve(result)\n                    if(result.data.status == 200) {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_success')})\n                        setTimeout(() => {window.location.reload()}, 3000)\n                    } else {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_fail')})\n                    }\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_get_list_adv() {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get('/advertisements').then(result => {\n                    resolve(result)\n                    this.adv_list = result.data.status == 200 ? result.data.data : []\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_detail_adv(adv) {\n            this.adv_selected = adv\n            this.disable_date.to = new Date()\n            this.handle_get_current_advertisement(adv.page, adv.position, adv.adversiting_time)\n            this.handle_check_have_avd(adv.id_brand,adv.page, adv.position, adv.adversiting_type)\n        },\n        handle_get_current_advertisement(page, position, range) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get(`/advertisements/advertisement-run&page=${page}&position=${position}&range=${range}`).then(result => {\n                    resolve(result.data)\n                    if(result.data.status == 200) {\n                        if(position == 'Slider' && result.data.data.length < 3) {\n                            this.disable_date.to = new Date()\n                        } else {\n                            this.disable_date.to = new Date()\n                            result.data.data.map(item => {\n                                var start_time = new Date(item.start_time)\n                                start_time.setUTCDate(start_time.getUTCDate() - 1)\n                                this.disable_date.ranges.push({from: start_time, to: new Date(item.stop_time)})\n                            })\n                        }\n                       \n                    } else {\n                        this.disable_date.to = new Date()\n                        this.disable_date.ranges.length = 0\n                    }\n                }).catch(error => {\n                    reject(error)\n                    console.log('Error:' + error);\n                })\n            })\n        },\n        handle_check_have_avd(id_brand, page, position, range, adversiting_type) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get(`/adv-check/advertisement-brand-have&brand=${id_brand}&page=${page}&position=${position}&range=${range}&advertisement-type=${adversiting_type}`).then(result => {\n                    resolve(result)\n                    result.data.data.map(item => {\n                        var start_time = new Date(item.start_time)\n                        start_time.setUTCDate(start_time.getUTCDate() - 1)\n                        this.disable_date.ranges.push({from: start_time, to: new Date(item.stop_time)})\n                    })\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_update() {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.patch('/advertisements/update-state/' + this.adv_selected._id, {status: this.adv_selected.adversiting_status, start_time: this.adv_selected.start_time}).then(result => {\n                    resolve(result)\n                    if(result.data.status == 200) {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_success')})\n                        this.adv_selected = null\n                        setTimeout(() => {window.location.reload()}, 3000)\n                    } else {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_fail')})\n                    }\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_process_choose_date() {\n            var start_date = Date.parse(this.adv_selected.start_time)\n            var stop_date = start_date + (this.adv_selected.adversiting_time - 1) * 24 * 60 * 60 * 1000\n            this.highlighted = {from:start_date, to: stop_date} \n            this.adv_selected.start_time = start_date\n        },\n        handle_cal_estimate_time(date_start, range) {\n          const time_start = new Date(date_start).getTime()\n          const time_current = new Date(Date.now()).getTime()\n          var estimate = 0\n          if(time_current >= time_start) {\n            estimate = range - ((time_current - time_start) / (1000 * 24 * 3600))\n            estimate = estimate > 0 ? estimate.toFixed(1) : 0\n          } else {\n            estimate = range\n          }\n          return estimate\n        },\n        handle_preview(advertisement) {\n            if(advertisement.adversiting_type == 'BANNER') {\n                this.adv_preview = advertisement\n                this.is_preview = true\n            }\n        },\n        handle_format_date(date) {\n            const value_date = new Date(date)\n            return `${value_date.getUTCDate()}/${value_date.getUTCMonth() + 1}/${value_date.getUTCFullYear()}\n            ${value_date.getUTCHours() < 10 ? `0${value_date.getUTCHours()}` : `${value_date.getUTCHours()}`}:\n            ${value_date.getUTCMinutes() < 10 ? `0${value_date.getUTCMinutes()}` : `${value_date.getUTCMinutes()}`}:\n            ${value_date.getUTCSeconds() < 10 ? `0${value_date.getUTCSeconds()}` : `${value_date.getUTCSeconds()}`}`\n        }\n    },\n    created() {\n        this.handle_get_list_adv()\n    }\n}\n",{"version":3,"sources":["AdvList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"AdvList.vue","sourceRoot":"src/components/Pages/Admin/Pages","sourcesContent":["<template>\n    <div class=\"flex-box padding-full block-custom-header\">\n        <div class=\"block-custom col-12 padding-fix-lr box-shadow margin-fix-right\" style=\"max-height: 82vh; background: #EDEDED; margin-bottom: 16px;\">\n            <div class=\"block-header bg-title-header padding-full header-fix\">\n                <p class=\"title-form\">{{$t('manager.adv')}}</p>\n            </div>\n            <div class=\"form-group row-group width-full\">\n                <div class=\"block-list-row width-full padding-full border-bottom-ol\">\n                     <div class=\"block-item-row-header margin-fix-right\" style=\"max-width: 24px;\">\n                        <p class=\"label text-color-second \">{{$t('user_page.nodot')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 148px;\">\n                        <p class=\"label text-color-second \">{{$t('form_joining.category')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 150px;\">\n                        <p class=\"label text-color-second \">{{$t('user_page.brand_name')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 140px;\">\n                        <p class=\"label text-color-second\">{{$t('manager.adv_type')}}</p>\n                    </div>\n                     <div class=\"block-item-row-header\" style=\"max-width: 80px;\">\n                        <p class=\"label text-color-second\">{{$t('page')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 80px;\">\n                        <p class=\"label text-color-second\" style=\"width: 100%; \">{{$t('position')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 90px;\">\n                        <p class=\"label text-color-second \">{{$t('estimate')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\">\n                        <p class=\"label text-color-second \">{{$t('date_start')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\">\n                        <p class=\"label text-color-second \">{{$t('user_page.status')}}</p>\n                    </div>\n                    <div class=\"block-item-row-header\" style=\"max-width: 160px;\">\n                        <p class=\"label text-color-second\" style=\"text-align:center ; width: 100%;\">{{$t('action')}}</p>\n                    </div>\n                </div>\n            </div>\n           <form class=\"block-form\" style=\"padding: 0 8px 16px 8px; max-height:100%; overflow: auto; margin-bottom: 24px;\">\n                <div class=\"form-group row-group padding-full\" v-if=\"adv_list.length == 0\">\n                    <span class=\"label text-center width-full\">{{$t('nodata')}}</span>\n                </div>\n                <div class=\"form-group row-group border-bottom-ol padding-full row-animation flex-row-center\" v-else v-for=\"(adv, index) in adv_list\" :key=\"index\">\n                    <div class=\"block-item-row \" style=\"max-width: 24px;\">\n                       <p class=\"label-cell\">{{index + 1}}</p>\n                    </div>\n                    <div class=\"block-item-row \" style=\"max-width: 148px;\">\n                        <p class=\"label-cell\">{{handle_translate(adv.category)}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"max-width: 150px;\">\n                        <p class=\"label-cell\">{{adv.brand_name}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"max-width: 140px;\">\n                        <p class=\"label-cell width-full\">{{adv.adversiting_type}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"justify-content: center;max-width: 80px;\">\n                        <p class=\"label-cell width-full\">{{adv.page == null ? 'Any' : adv.page}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"justify-content: center; max-width: 80px;\">\n                        <p class=\"label-cell width-full\">{{adv.position == null ? 'Any' : adv.position}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"max-width: 90px;\">\n                        <p class=\"label-cell width-full\">{{handle_cal_estimate_time(adv.start_time, adv.adversiting_time)}} {{$t('day')}}</p>\n                    </div>\n                    <div class=\"block-item-row \">\n                        <p class=\"label-cell\">{{handle_format_date(adv.start_time)}}</p>\n                    </div>\n                    <div class=\"block-item-row\">\n                        <p class=\"label-cell bold\" v-bind:class=\"{'color-red' : adv.adversiting_status == 'STOP', 'color-green' : adv.adversiting_status == 'START', 'color-orange' : adv.adversiting_status == 'PROCESSING'}\">{{handle_translate_state(adv.adversiting_status)}}</p>\n                    </div>\n                    <div class=\"block-item-row\" style=\"max-width: 160px;\">\n                        <a class=\"label-cell flex-box\" style=\"max-width: 80px;\" v-on:click=\"handle_detail_adv(adv)\">{{$t('see_more')}}</a>\n                        <span class=\"label-span margin-fix-right\" v-on:click=\"handle_preview(adv)\"><i class=\"far fa-eye\"  v-bind:class=\"{'black': adv.adversiting_type == 'BANNER', 'gray': adv.adversiting_type != 'BANNER'}\"></i></span>\n                        <span class=\"label-span margin-fix-right\" v-on:click=\"handle_change_status(adv, 'PAUSE')\" v-if=\"adv.adversiting_status != 'PAUSE'\"><i class=\"fas fa-lock\" style=\"color:#000\"></i></span>\n                        <span class=\"label-span\" v-on:click=\"handle_change_status(adv, 'START')\" v-if=\"adv.adversiting_status == 'PAUSE'\"><i class=\"fas fa-lock-open\" style=\"color:#000\"></i></span>\n                    </div>\n                </div>\n            </form>\n        </div>\n        \n        <div class=\"block-model\" style=\"background: rgba(0,0,0,.5)\" v-if=\"adv_selected\">\n            <div class=\"block-alert padding-full \">\n                <div class=\"block-header bg-title-header padding-full header-fix width-full\">\n                    <p class=\"title-form\">{{adv_selected.brand_name}} {{$t('manager.adv')}}</p>\n                </div>\n                <form class=\"block-form width-full padding-full\" @submit.prevent=\"handle_update\">\n                    <div class=\"form-group col-group\">\n                        <span class=\"label-span margin-bottom\">{{$t('user_page.status')}}</span>\n                        <select name=\"category\"  class=\"list-joining\" v-model=\"adv_selected.adversiting_status\" v-validate=\"'required: true'\" :disabled=\"adv_selected.adversiting_status == 'START'\">\n                            <option value=\"\" selected>-- {{$t('user_page.status')}} --</option>\n                            <option v-bind:value=\"item\" v-for=\"(item, index) in status\" :key=\"index\">{{handle_translate_state(item)}}</option>\n                        </select>\n                    </div>\n                    <div class=\"form-group col-group\">\n                        <span class=\"label-span\">{{$t('form_joining.category')}}</span>\n                        <input type=\"text\" class=\"margin-bottom border-bottom-ol\" name=\"category\" v-model=\"adv_selected.category\" readonly>\n                    </div>\n                    <div class=\"form-group col-group\">\n                        <span class=\"label-span\">{{$t('manager.adv_type')}}</span>\n                        <input type=\"text\" class=\"margin-bottom border-bottom-ol\" name=\"advertising_type\" v-model=\"adv_selected.adversiting_type\" readonly>\n                    </div>\n                    <div class=\"form-group col-group\">\n                        <span class=\"label-span\">{{$t('user_page.adver_time')}}</span>\n                        <input type=\"text\" class=\"margin-bottom border-bottom-ol\" name=\"status\" v-model=\"adv_selected.adversiting_time\" readonly>\n                    </div>\n                    <div class=\"form-group col-group\">\n                        <span class=\"label-span\">{{$t('date_start')}}</span>\n                        <datepicker v-if=\"adv_selected.adversiting_status != 'STOP'\" :placeholder=\"`${$t('date_start')}`\" class=\"date_picker margin-fix-top\" :disabled-dates=\"disable_date\" :highlighted=\"highlighted\" :format=\"format\" @closed=\"handle_process_choose_date\" v-model=\"adv_selected.start_time\"></datepicker>\n                    </div>\n                    <div class=\"form-group row-group\" style=\"justify-content: center;\">\n                        <div class=\"btn btn-cancel margin-fix-right\" style=\"color: #ED6B28; border: 1px solid #ED6B28\" v-on:click=\"adv_selected = null\">{{$t('cancel')}}</div>\n                        <button class=\"btn btn-signup primary-color\" style=\"color: #FFF\" v-if=\"adv_selected.adversiting_status == 'PROCESSING' || adv_selected.adversiting_status == 'PAUSE' || adv_selected.adversiting_status == 'STOP'\" >{{$t('save')}}</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div class=\"block-model\" style=\"background: rgba(0,0,0,.5)\" v-if=\"is_preview\">\n            <div class=\"block-alert padding-full\">\n                <div class=\"block-header bg-title-header padding-full header-fix width-full\">\n                    <p class=\"title-form\">Image {{adv_preview.brand_name}} Advertisement</p>\n                </div>\n                <div class=\"form-group col-group\" style=\"overflow:hidden; max-height: 500px\">\n                    <img :src=\"`${adv_preview.banner_file}`\" :alt=\"`${adv_preview.banner_file}`\" style=\"height: 100%;\">\n                </div>\n                <div class=\"form-group row-group\" style=\"justify-content: center\">\n                    <button class=\"btn btn-cancel margin-fix-right\" style=\"color: #ED6B28; border: 1px solid #ED6B28\" v-on:click=\"is_preview = false\">{{$t('cancel')}}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { HTTP_ADMIN } from '../../../../http-common';\nimport { socket_bus } from '../../../../main';\nimport datepicker from 'vuejs-datepicker';\n\nexport default {\n    components: { datepicker},\n    data() {\n        return {\n            adv_list: [],\n            adv_selected: null,\n            adv_preview: null,\n            is_preview: false,\n            status: ['START', 'STOP', 'PROCESSING', 'PAUSE', 'WAITING'],\n            format: 'dd/MM/yyyy',\n            disable_date : {\n                to: new Date(),\n                ranges: []\n            },\n            highlighted: {\n                to: null,\n                from: new Date(Date.now() + 24 * 60 * 60 * 1000)\n            },\n        }\n    },\n    methods: {\n        handle_translate_state (state) {\n            switch(state) {\n                case 'WAITING':\n                    return this.$t('waiting')\n                case 'START':\n                    return this.$t('start')\n                case 'STOP':\n                    return this.$t('stop')\n                case 'PROCESSING':\n                    return this.$t('processing')\n                case 'PAUSE':\n                    return this.$t('pause')\n            }\n        },\n        handle_translate(name) {\n            var result = ''\n            switch(name) {\n                case 'Drink':\n                    result = this.$t('drink')\n                    break;\n                case 'Dessert':\n                    result = this.$t('dessert')\n                    break;\n                case 'Vietnamese Foods':\n                    result = this.$t('vn_food')\n                    break;\n                case 'Foriegn Foods':\n                    result = this.$t('foriegn_fd')\n                    break;\n                case 'BBQ':\n                    result = this.$t('bbq')\n                    break;\n                case 'Brunch':\n                    result = this.$t('brunch')\n                    break;\n                case 'Hot Pot':\n                    result = this.$t('hotpot')\n                    break;\n            }\n            return result;\n        },\n        handle_change_status(advertisement, state) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.patch('/advertisements/update-state/' + advertisement._id, {status: state}).then(result => {\n                    resolve(result)\n                    if(result.data.status == 200) {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_success')})\n                        setTimeout(() => {window.location.reload()}, 3000)\n                    } else {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_fail')})\n                    }\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_get_list_adv() {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get('/advertisements').then(result => {\n                    resolve(result)\n                    this.adv_list = result.data.status == 200 ? result.data.data : []\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_detail_adv(adv) {\n            this.adv_selected = adv\n            this.disable_date.to = new Date()\n            this.handle_get_current_advertisement(adv.page, adv.position, adv.adversiting_time)\n            this.handle_check_have_avd(adv.id_brand,adv.page, adv.position, adv.adversiting_type)\n        },\n        handle_get_current_advertisement(page, position, range) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get(`/advertisements/advertisement-run&page=${page}&position=${position}&range=${range}`).then(result => {\n                    resolve(result.data)\n                    if(result.data.status == 200) {\n                        if(position == 'Slider' && result.data.data.length < 3) {\n                            this.disable_date.to = new Date()\n                        } else {\n                            this.disable_date.to = new Date()\n                            result.data.data.map(item => {\n                                var start_time = new Date(item.start_time)\n                                start_time.setUTCDate(start_time.getUTCDate() - 1)\n                                this.disable_date.ranges.push({from: start_time, to: new Date(item.stop_time)})\n                            })\n                        }\n                       \n                    } else {\n                        this.disable_date.to = new Date()\n                        this.disable_date.ranges.length = 0\n                    }\n                }).catch(error => {\n                    reject(error)\n                    console.log('Error:' + error);\n                })\n            })\n        },\n        handle_check_have_avd(id_brand, page, position, range, adversiting_type) {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.get(`/adv-check/advertisement-brand-have&brand=${id_brand}&page=${page}&position=${position}&range=${range}&advertisement-type=${adversiting_type}`).then(result => {\n                    resolve(result)\n                    result.data.data.map(item => {\n                        var start_time = new Date(item.start_time)\n                        start_time.setUTCDate(start_time.getUTCDate() - 1)\n                        this.disable_date.ranges.push({from: start_time, to: new Date(item.stop_time)})\n                    })\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_update() {\n            return new Promise((resolve, reject) => {\n                HTTP_ADMIN.patch('/advertisements/update-state/' + this.adv_selected._id, {status: this.adv_selected.adversiting_status, start_time: this.adv_selected.start_time}).then(result => {\n                    resolve(result)\n                    if(result.data.status == 200) {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_success')})\n                        this.adv_selected = null\n                        setTimeout(() => {window.location.reload()}, 3000)\n                    } else {\n                        socket_bus.$emit('SHOW_MESSAGE',{message: this.$t('message_alert.update_state_fail')})\n                    }\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        handle_process_choose_date() {\n            var start_date = Date.parse(this.adv_selected.start_time)\n            var stop_date = start_date + (this.adv_selected.adversiting_time - 1) * 24 * 60 * 60 * 1000\n            this.highlighted = {from:start_date, to: stop_date} \n            this.adv_selected.start_time = start_date\n        },\n        handle_cal_estimate_time(date_start, range) {\n          const time_start = new Date(date_start).getTime()\n          const time_current = new Date(Date.now()).getTime()\n          var estimate = 0\n          if(time_current >= time_start) {\n            estimate = range - ((time_current - time_start) / (1000 * 24 * 3600))\n            estimate = estimate > 0 ? estimate.toFixed(1) : 0\n          } else {\n            estimate = range\n          }\n          return estimate\n        },\n        handle_preview(advertisement) {\n            if(advertisement.adversiting_type == 'BANNER') {\n                this.adv_preview = advertisement\n                this.is_preview = true\n            }\n        },\n        handle_format_date(date) {\n            const value_date = new Date(date)\n            return `${value_date.getUTCDate()}/${value_date.getUTCMonth() + 1}/${value_date.getUTCFullYear()}\n            ${value_date.getUTCHours() < 10 ? `0${value_date.getUTCHours()}` : `${value_date.getUTCHours()}`}:\n            ${value_date.getUTCMinutes() < 10 ? `0${value_date.getUTCMinutes()}` : `${value_date.getUTCMinutes()}`}:\n            ${value_date.getUTCSeconds() < 10 ? `0${value_date.getUTCSeconds()}` : `${value_date.getUTCSeconds()}`}`\n        }\n    },\n    created() {\n        this.handle_get_list_adv()\n    }\n}\n</script>"]}]}